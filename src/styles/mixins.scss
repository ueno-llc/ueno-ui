@mixin fit {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function lock($min-size, $size, $page-limit) {
  $baseline: 375px;

  $font-multiplier: (($size - $min-size) / (strip-unit($page-limit) - strip-unit($baseline)));
  $font-baseline: ($min-size - $font-multiplier * strip-unit($baseline));

  @return calc(#{$font-multiplier} * #{100vw} + (#{$font-baseline}px));
}

// set copy element width based on font sizes
// all values must be computed from px-equivalent values
@mixin copy-dimensions($width: auto, $margin: 0, $font-size: $font-size) {
  @if $margin != 0 {
    margin-bottom: (strip-unit($margin/$font-size)) * 1em;
  }

  @if $width != auto {
    max-width: (strip-unit($width) / strip-unit(strip-unit($font-size))) * 1em;
  }
}

// defaults to standard heading size
@mixin responsive-font($min-size: 23, $size: 36, $page-limit: 1200px) {
  $baseline: 375px;
  $font-multiplier: (($size - $min-size) / (strip-unit($page-limit) - strip-unit($baseline)));
  $font-baseline: ($min-size - $font-multiplier * strip-unit($baseline));

  font-size: #{$min-size}px;

  @media (min-width: $baseline) {
    font-size: #{$min-size}px;
    font-size: lock($min-size, $size, $page-limit);
  }

  @media (min-width: $page-limit) {
    font-size: #{$size}px;
  }
}

@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 1.3),
    only screen and (-o-min-device-pixel-ratio: 13/10),
    only screen and (min-resolution: 120dpi) {
    @content;
  }
}

// segment customisable per-component / instance rather than being forced to work around defaults.
@mixin segment() {
  position: relative;

  padding-top: $segment-gutter-mobile;
  padding-bottom: $segment-gutter-mobile - $gutter;

  @media (min-width: $min-tablet) {
    padding-top: $segment-gutter-tablet;
    padding-bottom: $segment-gutter-tablet - $gutter;
  }

  @media (min-width: $min-desktop) {
    padding-top: $segment-gutter-desktop;
    padding-bottom: $segment-gutter-desktop - $gutter;
  }

  @media (min-width: $min-1440) {
    padding-top: $segment-gutter-desktop * 1.75;
    padding-bottom: $segment-gutter-desktop * 1.75 - $gutter;
  }
}

@mixin container() {
  margin: 0 auto;

  padding-left: $container-gutter-mobile;
  padding-right: $container-gutter-mobile;

  max-width: $page-width + $container-gutter-mobile * 1;

  @media (min-width: $min-mobile) {
    max-width: $page-width + $container-gutter-mobile * 2;
  }

  @media (min-width: $min-tablet) {
    padding-left: $container-gutter-tablet;
    padding-right: $container-gutter-tablet;
    max-width: $page-width + $container-gutter-tablet * 2;
  }

  @media (min-width: $min-desktop) {
    padding-left: $container-gutter-desktop;
    padding-right: $container-gutter-desktop;
    max-width: $page-width + $container-gutter-desktop * 2;
  }
}

// html.js / html.no-js will not compile?!
// hence these workaround selectors
@mixin js-only {
  html:not(:global(.no-js)) & {
    @content;
  }
}

@mixin no-js {
  html:not(:global(.js)) & {
    @content;
  }
}

// gsap trans-in defaults
@mixin will-animate($transform: true, $opacity: true) {

  @include js-only {
    @if $opacity == true {
      opacity: 0;
    }

    @if $transform == true {
      will-change: opacity, transform;
    }

    @else {
      will-change: opacity;
    }
  }
}

@mixin hero {
  display: flex;
  align-items: center;
  justify-content: center;

  position: relative;
  margin: auto;

  width: 100%;
  min-height: 340px;
  overflow: hidden;

  text-align: center;

  background-color: $color-background-gray;

  @media (min-width: $min-mobile) {
    min-height: 500px;
  }

  @media (min-width: $min-tablet) {
    min-height: 700px;
  }

  @media (min-width: $min-desktop) {
    min-height: 840px;
  }
}

@mixin font-size($size) {
  font-size: $size * 0.6;

  @media (min-width: $min-480) {
    font-size: $size * 0.7;
  }

  @media (min-width: $min-768) {
    font-size: $size * 0.8;
  }

  @media (min-width: $min-1200) {
    font-size: $size;
  }
}

@function lock($min-size, $size, $page-limit) {
  $baseline: 375px;

  $font-multiplier: (($size - $min-size) / (strip-unit($page-limit) - strip-unit($baseline)));
  $font-baseline: ($min-size - $font-multiplier * strip-unit($baseline));

  @return calc(#{$font-multiplier} * #{100vw} + (#{$font-baseline}px));
}

// generic padding for each section based on PSD styles
@mixin section($padding-top: $section-gutter, $padding-bottom: $section-gutter, $padding-top-mobile: $section-gutter-mobile, $padding-bottom-mobile: $section-gutter-mobile) {
  padding-top: $padding-top-mobile;
  padding-bottom: $padding-bottom-mobile;

  @media (min-width: $min-tablet) {
    padding-top: percentage(strip-unit($padding-top) / strip-unit($page-limit));
    padding-bottom: percentage(strip-unit($padding-bottom) / strip-unit($page-limit));
  }

  @media (min-width: $page-limit) {
    padding-top: strip-unit($padding-top) * 1px;
    padding-bottom: strip-unit($padding-bottom) * 1px;
  }
}

// Placeholder
@mixin placeholder($color) {
  &::-webkit-input-placeholder {
    color: $color;
  }

  &:-moz-placeholder {
    color: $color;
  }

  &::-moz-placeholder {
    color: $color;
  }

  &:-ms-input-placeholder {
    color: $color;
  }
}

// Offseting hero image
@mixin heroImage($direction: left, $heroOffset: 190px, $scale: false) {
  @if $direction == right {
    margin-right: -$gutter;

    @media (min-width: $min-tablet) {
      margin-right: -$container-gutter-tablet;
    }

    @media (min-width: $min-desktop) {
      margin-right: -$container-gutter-desktop;
    }

    @media (min-width: $page-width + $heroOffset - 50px) {
      margin-right: calc((100vw - #{$page-width}) / -2);
    }

    @if $scale == false {
      @media (min-width: 1670px) {
        margin-right: -$heroOffset;
      }
    }
  }

  @else if $direction == left {
    margin-left: -$gutter;

    @media (min-width: $min-tablet) {
      margin-left: -$container-gutter-tablet;
    }

    @media (min-width: $min-desktop) {
      margin-left: -$container-gutter-desktop;
    }

    @media (min-width: $page-width + $heroOffset - 50px) {
      margin-left: calc((100vw - #{$page-width}) / -2);
    }

    @if $scale == false {
      @media (min-width: 1670px) {
        margin-left: -$heroOffset;
      }
    }
  }
}

// Form element styling
@mixin formElement {
  @include reset-input;
  @include copy;
  @include placeholder(#4b4d53);

  display: block;
  position: relative;
  z-index: $z-index-2;

  margin-bottom: $gutter;
  width: 100%;
  height: 40px;

  color: #000;

  border: 0;
  background-color: transparent;
  border-bottom: 1px solid rgba(144, 158, 167, 0.5);
  border-radius: 0;

  .form__sent &:invalid {
    box-shadow: 0 0 0 1px #f00;
  }

  &:active,
  &:focus {
    @include placeholder(transparent);
    border-bottom: 1px solid rgba(144, 158, 167, 0.9);
    outline: none;
  }

  &:required {
    box-shadow: none;
  }

  &:invalid {
    box-shadow: none;
  }
}

@mixin heading($min: 37, $max: 52) {
  @include reset-heading;
  @include responsive-font($min, $max);

  margin-bottom: (5/52) * 1em;

  font-family: $font-family-heading;
  font-weight: 200;
  letter-spacing: -0.025em;
  line-height: (58/52);

  color: #000;
}

@mixin subheading($min: 37, $max: 52) {
  @include reset-heading;
  @include responsive-font($min, $max);

  font-family: $font-family-heading;
  font-weight: 100;
  letter-spacing: -0.035em;
  line-height: (58/52);

  color: $color-subheading;
}

@mixin copy($min: 16, $max: 20) {
  @include reset-all;
  @include responsive-font($min,$max);

  color: $color-content;
  letter-spacing: 0.025em;
  line-height: (28/18);
  font-weight: 300;
}

@mixin anchor($min: 13, $max: 14) {
  @include reset-anchor;
  @include responsive-font($min, $max);

  color: $color-dark;
  text-transform: capitalize;
  letter-spacing: 0.02em;
  line-height: (20/14);
  font-weight: 500;
}

// bordered section
@mixin border($position: top, $color: $color-border) {
  position: relative;

  &::before {
    content: '';

    position: absolute;
    left: $container-gutter-mobile;
    right: $container-gutter-mobile;

    @if $position == 'bottom' {
      bottom: 0;
    }
    @else {
      top: 0;
    }

    margin: auto;

    max-width: $page-width;
    height: 1px;
    background: $color;

    @media (min-width: $min-tablet) {
      left: $container-gutter-tablet;
      right: $container-gutter-tablet;
    }

    @media (min-width: $min-desktop) {
      left: $container-gutter-desktop;
      right: $container-gutter-desktop;
    }
  }
}
